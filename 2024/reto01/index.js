/*
üîì Desaf√≠o 1: ¬°Consigue acceso a la terminal!
Estamos en problemas. La IA Œ©MEGA est√° descontrolada. Por suerte, he conseguido a√±adir una contrase√±a para evitar que acceda a esta terminal. El sistema no es dif√≠cil, pero nos deber√≠a dar el tiempo suficiente.

Te voy a dar una lista de n√∫meros y, al lado, los movimientos que debes hacer en estos n√∫meros. Imagina los candados num√©ricos esos que van con combinaciones.

Candado num√©rico

El n√∫mero de la izquierda es la combinaci√≥n inicial y las cadenas de texto de la derecha son los movimientos que debes hacer.

Siempre empezamos del primer n√∫mero de la izquierda. Los movimientos son:

R (Right) movernos al siguiente d√≠gito
L (Left) desplazarnos al d√≠gito anterior
U (Up) incrementar ese d√≠gito
D (Down) decrementar el d√≠gito actual
Si llegamos a la derecha del todo y recibimos un R, volvemos al primer d√≠gito. Si recibimos L y estamos en el primero, vamos al √∫ltimo. En el caso de que el d√≠gito actual sea 9 y recibamos una U, pasar√° a 0. Y si es D y ese d√≠gito es 0, pasar√° a ser 9.

¬øLo entiendes? ¬°Es muy importante que lo entiendas! Mira, te dejo unos ejemplos:

000 URURD -> 119
1111 UUURUUU -> 4411
9999 LULULULD -> 8000
¬øLo captas? Vale, pues para desbloquear la terminal debes enviar el n√∫mero al ejecutar esta combinaci√≥n:

528934712834 U R DU R UD R UD LLLL UUDDUDUDUD LL RRRR
¬°Date prisa! ¬°No tenemos mucho tiempo!
*/

const reto01 = () => { // 628934712834
  const code = '528934712834 URDURUDRUDLLLLUUDDUDUDUDLLRRRR'
  const numbers = code.split(' ')[0].split('').map(Number)
  const movements = code.split(' ')[1].split('')

  let position = 0
  for (let i = 0; i < movements.length; i++) {
    switch (movements[i]) {
      case 'U': // Si subimos un n√∫mero pero es mayor de 9, lo ponemos a 0
        numbers[position] = (numbers[position] + 1 > 9) ? 0 : numbers[position] + 1
        break
      case 'D': // Si bajamos un n√∫mero pero es menor de 0, lo ponemos a 9
        numbers[position] = (numbers[position] - 1 < 0) ? 9 : numbers[position] - 1
        break
      case 'R': // Si nos movemos a la derecha pero estamos mas all√° del final, nos ponemos en la primera posici√≥n
        position = (position + 1 >= position.length) ? 0 : position + 1
        break
      case 'L': // Si nos movemos a la izquierda pero estamos mas all√° del principio, nos ponemos en la √∫ltima posici√≥n
        position = (position - 1 < 0) ? position.length - 1 : position - 1
        break
    }
  }
  return numbers.join('')
}



console.log(`submit ${reto01()}`);





